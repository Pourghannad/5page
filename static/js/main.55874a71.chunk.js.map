{"version":3,"sources":["root-style.module.scss","components/loading/style.module.scss","Root.js","serviceWorker.js","index.js","components/loading/index.js"],"names":["module","exports","Home","React","lazy","Level","Play","About","Editor","Root","useState","fontReady","setFontReady","useEffect","document","fonts","ready","then","catch","className","style","fallback","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","Loading"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,iBAAiB,mCAAmC,QAAU,8B,mBCAhFD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,YAAc,6B,yMCM3DC,G,YAAOC,IAAMC,MAAK,kBAAM,iCACxBC,EAAQF,IAAMC,MAAK,kBAAM,gCACzBE,EAAOH,IAAMC,MAAK,kBAAM,gCACxBG,EAAQJ,IAAMC,MAAK,kBAAM,gCACzBI,EAASL,IAAMC,MAAK,kBAAM,gCAoCjBK,EAlCF,WAAO,IAAD,EACiBC,oBAAS,GAD1B,mBACVC,EADU,KACCC,EADD,KAWjB,OATAC,qBAAU,WACRC,SAASC,MAAMC,MACZC,MAAK,WACJL,GAAa,MAEdM,OAAM,WACLN,GAAa,QAEhB,IAED,kBAAC,IAAD,KACGD,EACC,kBAAC,IAAD,MAEA,0BAAMQ,UAAWC,IAAM,mBACrB,6BAASD,UAAWC,IAAK,SACvB,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,SAASC,UAAWnB,IACtC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,QAAQC,UAAWlB,IACrC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,SAASC,UAAWjB,IACtC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,UAAUC,UAAWhB,UCzBjDiB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTf,MAAK,SAAAoB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BnB,OAAM,SAAA8B,GACLJ,QAAQI,MAAM,4CAA6CA,MC3FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDanB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,SAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,SAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5B1C,MAAK,SAAA2C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAcnB,MAAMC,MAAK,SAAAoB,GACjCA,EAAa4B,aAAahD,MAAK,WAC7BU,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bf,OAAM,WACL0B,QAAQC,IACN,oEAvFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAcnB,MAAMC,MAAK,WACjC2B,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCtC/BE,I,+BCZA,qCAeeiC,IAZC,kBACZ,yBAAKjD,UAAWC,IAAK,SACjB,6BACI,mCACA,mCACA,mCACA,mCACA,wC","file":"static/js/main.55874a71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main-container\":\"root-style_main-container__1zZh7\",\"wrapper\":\"root-style_wrapper__24upQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"style_loading__mPpR4\",\"fiveLoading\":\"style_fiveLoading__o9ip2\"};","import React, { Suspense, useEffect, useState } from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport style from \"./root-style.module.scss\";\nimport Loading from \"./components/loading\";\nimport \"./reset.scss\";\nimport \"./fonts.scss\";\n\nconst Home = React.lazy(() => import(\"./pages/Home\"));\nconst Level = React.lazy(() => import(\"./pages/Level\"));\nconst Play = React.lazy(() => import(\"./pages/Play\"));\nconst About = React.lazy(() => import(\"./pages/About\"));\nconst Editor = React.lazy(() => import(\"./pages/Editor\"));\n\nconst Root = () => {\n  const [fontReady, setFontReady] = useState(true);\n  useEffect(() => {\n    document.fonts.ready\n      .then(() => {\n        setFontReady(false);\n      })\n      .catch(() => {\n        setFontReady(false);\n      });\n  }, []);\n  return (\n    <HashRouter>\n      {fontReady ? (\n        <Loading />\n      ) : (\n        <main className={style[\"main-container\"]}>\n          <section className={style[\"wrapper\"]}>\n            <Switch>\n              <Suspense fallback={<Loading />}>\n                <Route exact path=\"/\" component={Home} />\n                <Route exact path=\"/level\" component={Level} />\n                <Route exact path=\"/play\" component={Play} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/editor\" component={Editor} />\n              </Suspense>\n            </Switch>\n          </section>\n        </main>\n      )}\n    </HashRouter>\n  );\n};\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n","import React from \"react\";\nimport style from \"./style.module.scss\";\n\nconst Loading = () => (\n    <div className={style[\"loading\"]}>\n        <div>\n            <span>5</span>\n            <span>5</span>\n            <span>5</span>\n            <span>5</span>\n            <span>5</span>\n        </div>\n    </div>\n);\n\nexport default Loading;"],"sourceRoot":""}